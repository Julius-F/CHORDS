.program dmsp_transmit
; DMSP Transmitter with exact timing
; - Frame starts when CHANNEL_CTRL_PIN pulses high
; - Transmits 1 bit per GLOBAL_CLK_PIN rising edge
; - MSB first, 32-bit frames

.side_set 1 opt

.wrap_target
    wait 1 pin 0        ; Wait for control pin high (frame start)
    set x, 31           ; Initialize bit counter for 32 iterations
    
bit_loop:
    wait 1 pin 1        ; Wait for clock rising edge
    out pins, 1         ; Shift out 1 bit (MSB first)
    jmp x--, bit_loop   ; Loop for all 32 bits (x from 32 to 1, stops at 0)
    
    wait 0 pin 0        ; Wait for control pin low (frame end)
.wrap

% c-sdk {
static inline void dmsp_transmit_program_init(PIO pio, uint sm, uint offset, 
                                             uint clk_pin, uint ctrl_pin, uint out_pin) {
    // Configure pins
    pio_gpio_init(pio, clk_pin);
    pio_gpio_init(pio, ctrl_pin);
    pio_gpio_init(pio, out_pin);

    // Set pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, false);  // Input
    pio_sm_set_consecutive_pindirs(pio, sm, ctrl_pin, 1, false); // Input
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true);   // Output

    // Load the PIO program
    pio_sm_config c = dmsp_transmit_program_get_default_config(offset);

    // Map OUT and SET pins
    sm_config_set_out_pins(&c, out_pin, 1); // Output pin for data
    sm_config_set_out_shift(&c, false, true, 32); // Shift left, autopull, 32 bits

    // Set pin base for WAIT and JMP instructions
    sm_config_set_jmp_pin(&c, ctrl_pin);   // Base for wait instructions
    sm_config_set_in_pins(&c, clk_pin);    // Base for clock input

    // Clock configuration
    sm_config_set_clkdiv(&c, 1.0);         // Full speed

    // Initialize the state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
